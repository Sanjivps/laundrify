MIT

Arduino Code:

#include <SoftwareSerial.h>

SoftwareSerial espSerial(10, 11); // 11 RX,10 TX (connect to ESP TX, RX)

const int LDR_PIN = A0; const int KNOWN_RESISTOR = 10000;

const int SAMPLING_PERIOD = 1000; const int AVERAGING_TIME = 10;

const int motionSensorPin = 2; const int powerPin = 3; const int ledPin = LED_BUILTIN;

unsigned long motionTimeout = 10000; unsigned long lastMotionTime = 0; bool checkingLaundry = false;

void setup() { pinMode(ledPin, OUTPUT); digitalWrite(ledPin, HIGH);

pinMode(motionSensorPin, INPUT);
pinMode(powerPin, OUTPUT);

Serial.begin(115200);       // USB Serial for debugging
espSerial.begin(115200);      // Lower baud rate for stable SoftwareSerial
}

void loop() { int motionDetected = digitalRead(motionSensorPin);

if (motionDetected == HIGH) {
    lastMotionTime = millis();
    checkingLaundry = false;

    digitalWrite(powerPin, LOW);
    digitalWrite(ledPin, LOW);

    Serial.println("MOTION:1");
    espSerial.println("MOTION:1"); // Send to ESP with newline for better parsing
}

if (millis() - lastMotionTime > motionTimeout) {
    checkingLaundry = true;
}

while (checkingLaundry) {
    Serial.println("MOTION:0"); // Added print here
    espSerial.println("MOTION:0");
    checkLaundry(); // Start LDR averaging

    unsigned long checkStartTime = millis();
    while (millis() - checkStartTime < 10000) {
        if (digitalRead(motionSensorPin) == HIGH) {
            Serial.println("MOTION:1");
            espSerial.println("MOTION:1");
            checkingLaundry = false;
            return;
        }
        delay(500);
    }
}

delay(500);
}

void checkLaundry() { long totalResistance = 0; int readingsCount = 0;

digitalWrite(powerPin, HIGH);

for (int i = 0; i < AVERAGING_TIME; i++) {
    if (digitalRead(motionSensorPin) == HIGH) {
        Serial.println("MOTION:1");
        espSerial.println("MOTION:1");
        checkingLaundry = false;
        digitalWrite(powerPin, LOW);
        return;
    }
    espSerial.println("MOTION:0");

    int sensorValue = analogRead(LDR_PIN);
    float voltage = sensorValue * (5.0 / 1023.0);
    float ldrResistance = (KNOWN_RESISTOR * (5.0 - voltage)) / voltage;

    totalResistance += ldrResistance;
    readingsCount++;

    delay(SAMPLING_PERIOD);
}

digitalWrite(powerPin, LOW);

float averageResistance = totalResistance / readingsCount;

// Send only the relevant data to ESP
if (averageResistance < 8000) {
    Serial.println("LAUNDRY:0");
    espSerial.println("LAUNDRY:0");
} else {
    Serial.println("LAUNDRY:1");
    espSerial.println("LAUNDRY:1");
}
}

#include "secrets.h" #include <Firebase.h>

Firebase fb(REFERENCE_URL);

void setup() { Serial.begin(115200); // Serial for communication with Arduino WiFi.mode(WIFI_STA); WiFi.disconnect(); delay(1000);

Serial.println("\nConnecting to WiFi...");
WiFi.begin(WIFI_SSID, WIFI_PASSWORD);


while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
}


Serial.println("\nWiFi Connected");


fb.setInt("/test", 1738);
fb.setInt("/hasmotion", 10);
fb.setInt("/haslaundry", 5);
}

void loop() {

    fb.setInt("/test", 18);
    delay(50);
    String message = Serial.readStringUntil('\n');  // Read from Arduino
    message.trim();  // Ensure no extra spaces


    if (message.startsWith("MOTION:")) {
        int motionStatus = message.substring(7).toInt();
        fb.setInt("/hasmotion", motionStatus);
        Serial.println("Firebase Updated: Motion = " + String(motionStatus));
    }
    else if (message.startsWith("LAUNDRY:")) {
        int laundryStatus = message.substring(8).toInt();
        fb.setInt("/haslaundry", laundryStatus);
        Serial.println("Firebase Updated: Laundry = " + String(laundryStatus));
    }
}

#define WIFI_SSID "utexas-iot" #define WIFI_PASSWORD "68448516348347489491"

/*
